{
	"info": {
		"_postman_id": "24653f74-0e8c-4e5b-bcc4-1516e4139939",
		"name": "JSON Placeholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21991209"
	},
	"item": [
		{
			"name": "GET Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Should verify response status code\", () => {\r",
							"//     //console.log(pm.response.responseTime)\r",
							"//     //pm.response.to.have.status(200);\r",
							"//     pm.expect(pm.response.code).to.eql(200)\r",
							"// })\r",
							"\r",
							"pm.test(\"Should verify response Time\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.lessThan(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response status\"), () => {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"    pm.expect(pm.response.status).to.be.a(\"string\");\r",
							"}\r",
							"\r",
							"pm.test(\"Should verify post id\"), () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(responseBody[1]);\r",
							"}\r",
							"\r",
							"pm.test(\"Should verify response email\"), () => {\r",
							"    const responseBody = pm.response.json();\r",
							"        pm.expect(responseBody[1].email).to.include(\"@\");\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/posts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should verify response status code\", () => {\r",
							"    console.log(pm.response)\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    })\r",
							"\r",
							"pm.test(\"Should verify response Time\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.lessThan(200)   \r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response status\", () => {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\")\r",
							"    pm.expect(pm.response.status).to.be.a(\"string\")\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response status code\", () => {\r",
							"    const responseBody = pm.response.json()\r",
							"    console.log(responseBody[1])\r",
							"})\r",
							"\r",
							"pm.test(\"Should veify all response email\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    responseBody.map(obiekt => {\r",
							"        console.log(obiekt.email)\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Should veify all response email\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    responseBody.map(obiekt => {\r",
							"        pm.expect(obiekt.email).to.include(\"@\");\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Should veify length of name\", () => {\r",
							"    const responseBody = pm.response.json()\r",
							"    pm.expect(responseBody[1].name).to.have.lengthOf(41)\r",
							"    })\r",
							"\r",
							"pm.test(\"Sould verify content type response\"), () => {\r",
							"    pm.response.to.have.header(\"Content-type\")\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pobranie zmiennej globalnej\r",
							"// pm.test(\"Global\", () => {\r",
							"//     const expectedTitle = pm.globals.get(\"postTitle\");\r",
							"//     const resBody = pm.response.json();\r",
							"//     pm.expect(resBody.title)to.eql(expectedTitle)\r",
							"// })\r",
							"\r",
							"// pm.test(\"Collection\", () => {\r",
							"//     const expectUrl = pm.collectionVariables.get(\"baseUrl\")\r",
							"//     console.log(expectUrl);\r",
							"// })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userID\": {{userID}},\r\n    \"id\": 1625,\r\n    \"title\": \"{{postTitle}}\",\r\n    \"body\": \"{{postBody}}\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/posts",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function wyswietlNapis() {\r",
							"    console.log(\"Jestem skryptem wywo≈Çywanym przed zapytaniem\")\r",
							"}\r",
							"\r",
							"wyswietlNapis();\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n    \"id\": 3,\r\n    \"name\": \"New name\",\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"test@test.com\",\r\n    \"address\": {\r\n      \"street\": \"Douglas Extension\",\r\n      \"suite\": \"Suite 847\",\r\n      \"city\": \"McKenziehaven\",\r\n      \"zipcode\": \"59590-4157\",\r\n      \"geo\": {\r\n        \"lat\": \"-68.6102\",\r\n        \"lng\": \"-47.0653\"\r\n      }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/3",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/2",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com",
			"disabled": true
		},
		{
			"key": "userID",
			"value": "13",
			"type": "string"
		}
	]
}